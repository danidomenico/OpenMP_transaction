<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>Cowichan: TupleApplication Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.9 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>TupleApplication Class Reference</h1><!-- doxytag: class="TupleApplication" --><code>#include &lt;<a class="el" href="tuple__common_8hpp_source.html">tuple_common.hpp</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for TupleApplication:</div>
<div class="dynsection">

<p><center><img src="class_tuple_application.png" usemap="#TupleApplication_map" border="0" alt=""></center>
<map name="TupleApplication_map">
<area href="class_l_t_bounds.html" alt="LTBounds" shape="rect" coords="116,56,222,80">
<area href="class_l_t_forward.html" alt="LTForward" shape="rect" coords="116,112,222,136">
<area href="class_l_t_frequency.html" alt="LTFrequency" shape="rect" coords="116,168,222,192">
<area href="class_l_t_half.html" alt="LTHalf" shape="rect" coords="116,224,222,248">
<area href="class_l_t_hull.html" alt="LTHull" shape="rect" coords="116,280,222,304">
<area href="class_l_t_life.html" alt="LTLife" shape="rect" coords="116,336,222,360">
<area href="class_l_t_mandel.html" alt="LTMandel" shape="rect" coords="116,392,222,416">
<area href="class_l_t_norm.html" alt="LTNorm" shape="rect" coords="116,448,222,472">
<area href="class_l_t_outer.html" alt="LTOuter" shape="rect" coords="116,504,222,528">
<area href="class_l_t_product.html" alt="LTProduct" shape="rect" coords="116,560,222,584">
<area href="class_l_t_randmat.html" alt="LTRandmat" shape="rect" coords="116,616,222,640">
<area href="class_l_t_sor.html" alt="LTSor" shape="rect" coords="116,672,222,696">
<area href="class_l_t_thresh.html" alt="LTThresh" shape="rect" coords="116,728,222,752">
<area href="class_l_t_vecdiff.html" alt="LTVecdiff" shape="rect" coords="116,784,222,808">
<area href="class_l_t_winnow.html" alt="LTWinnow" shape="rect" coords="116,840,222,864">
</map>
</div>

<p>
<a href="class_tuple_application-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tuple_application.html#892dbd783a1983228ac3865fb082f47a">addInput</a> (int name, void *data)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tuple_application.html#985c26b37c8040ea51968af9caca9d3b">addOutput</a> (int name, void *data)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tuple_application.html#9d0c51c481ef477787ffc2fd00116f4e">start</a> (const char *host, int portNumber, int numWorkers)</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tuple_application.html#e163c5a536de01c8b94b49528a17dab2">consumeInput</a> ()=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tuple_application.html#ef6ae8bb1d697e4ed038b43320183c89">work</a> ()=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tuple_application.html#8743dfcf17dedd52887c0b2ab170d8dc">produceOutput</a> ()=0</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::map&lt; int, void * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tuple_application.html#92a57e83bfd67542ae58e6a78720a3ef">inputs</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::map&lt; int, void * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tuple_application.html#8abaaa3ef053827d70b3948e6f855082">outputs</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">struct context&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_tuple_application.html#773a45a8a04a872fd9c42b9ec07c8ebd">ctx</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The common tuple application class allows LinuxTuples applications to be easily created. The class takes care of process creation and destruction, and makes sure outputs get carried onto the main process. Additionally, virtual functions are provided for workers and input/output processes. Things that need to be done in the tuple space should consider inheriting from this class. The class which all tuple applications should inherit from. <hr><h2>Member Function Documentation</h2>
<a class="anchor" name="892dbd783a1983228ac3865fb082f47a"></a><!-- doxytag: member="TupleApplication::addInput" ref="892dbd783a1983228ac3865fb082f47a" args="(int name, void *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void TupleApplication::addInput           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set up input pointers. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>the "name" of the data </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>the pointer to passed to the tuple-space </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="985c26b37c8040ea51968af9caca9d3b"></a><!-- doxytag: member="TupleApplication::addOutput" ref="985c26b37c8040ea51968af9caca9d3b" args="(int name, void *data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void TupleApplication::addOutput           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set up output pointers. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>name</em>&nbsp;</td><td>the "name" of the data </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>data</em>&nbsp;</td><td>the pointer to passed to the tuple-space </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="e163c5a536de01c8b94b49528a17dab2"></a><!-- doxytag: member="TupleApplication::consumeInput" ref="e163c5a536de01c8b94b49528a17dab2" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void TupleApplication::consumeInput           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [protected, pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The consume input process is spawned once and should distribute tasks to the worker processes. 
<p>Implemented in <a class="el" href="class_l_t_forward.html#6f3bbdf720e1899b0df8a8f222727086">LTForward</a>, <a class="el" href="class_l_t_half.html#fc07035f40f22a3f827504b13e8f99c9">LTHalf</a>, <a class="el" href="class_l_t_hull.html#e726f7fe6b16d8aa393045d4233a8447">LTHull</a>, <a class="el" href="class_l_t_life.html#da0a691f9bf8bb055a4fe953dd6eb809">LTLife</a>, <a class="el" href="class_l_t_mandel.html#15fb4ee93967f8717db22056f666f723">LTMandel</a>, <a class="el" href="class_l_t_bounds.html#ac6861a60c9a42ec8fc71025b481c380">LTBounds</a>, <a class="el" href="class_l_t_norm.html#58c0b2b050ac4e0fd5927fff451ae9ff">LTNorm</a>, <a class="el" href="class_l_t_outer.html#3e0493a0d06fbc86fe614edbd752eb8a">LTOuter</a>, <a class="el" href="class_l_t_product.html#377454ff007fa15f0bd378013bf1e6e6">LTProduct</a>, <a class="el" href="class_l_t_randmat.html#73181e409565b18c77d880dbf4123b26">LTRandmat</a>, <a class="el" href="class_l_t_sor.html#4fc4f0f914fc08f57f2ef5ba346cef1d">LTSor</a>, <a class="el" href="class_l_t_frequency.html#4ac4fa1a348246caf0d34506fcd09a64">LTFrequency</a>, <a class="el" href="class_l_t_thresh.html#b802b240b17b2c71cb758e1fe7585d72">LTThresh</a>, <a class="el" href="class_l_t_vecdiff.html#9daf31de467c9694e59b55936780dce8">LTVecdiff</a>, and <a class="el" href="class_l_t_winnow.html#ec961ab4e19c71b475903972111c20e9">LTWinnow</a>.</p>

</div>
</div><p>
<a class="anchor" name="8743dfcf17dedd52887c0b2ab170d8dc"></a><!-- doxytag: member="TupleApplication::produceOutput" ref="8743dfcf17dedd52887c0b2ab170d8dc" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void TupleApplication::produceOutput           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [protected, pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The output producer decides when the tuple application is finished; once this function returns, the tuple application is complete. 
<p>Implemented in <a class="el" href="class_l_t_forward.html#56c27cd419407319f95afa4e7d43409a">LTForward</a>, <a class="el" href="class_l_t_half.html#bf36d89af87f94ff2aaff36338717f37">LTHalf</a>, <a class="el" href="class_l_t_hull.html#14a3bf005173aa79d0c7259579229f12">LTHull</a>, <a class="el" href="class_l_t_life.html#a0ac21131813f89a94c6ba7515e63c11">LTLife</a>, <a class="el" href="class_l_t_mandel.html#31cacf747914e03e6a87bb9af7dff67e">LTMandel</a>, <a class="el" href="class_l_t_bounds.html#028a451c099ee3377dc64a5a8ae9954f">LTBounds</a>, <a class="el" href="class_l_t_norm.html#2e142e5c7fabd218436f2abe99f4535b">LTNorm</a>, <a class="el" href="class_l_t_outer.html#2a12a006761b2e1132b84209d29fddac">LTOuter</a>, <a class="el" href="class_l_t_product.html#d03b068863d7b2febcbb7b11ebb819ca">LTProduct</a>, <a class="el" href="class_l_t_randmat.html#3adc0a50f5840dcc1228f4449e2b5da3">LTRandmat</a>, <a class="el" href="class_l_t_sor.html#19e969a6ab342ee86d86721fbd37e7a6">LTSor</a>, <a class="el" href="class_l_t_frequency.html#e80cd869c8935cb7fe553c6ad27e861b">LTFrequency</a>, <a class="el" href="class_l_t_thresh.html#41ce024f24320a5bd65239e98ac85587">LTThresh</a>, <a class="el" href="class_l_t_vecdiff.html#69d3c6e3c51052522d474cc75d11a2f2">LTVecdiff</a>, and <a class="el" href="class_l_t_winnow.html#865de8a240ae781c8cc5567082edc2ea">LTWinnow</a>.</p>

</div>
</div><p>
<a class="anchor" name="9d0c51c481ef477787ffc2fd00116f4e"></a><!-- doxytag: member="TupleApplication::start" ref="9d0c51c481ef477787ffc2fd00116f4e" args="(const char *host, int portNumber, int numWorkers)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int TupleApplication::start           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>host</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>portNumber</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>numWorkers</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Starts the tuple-space job. 
</div>
</div><p>
<a class="anchor" name="ef6ae8bb1d697e4ed038b43320183c89"></a><!-- doxytag: member="TupleApplication::work" ref="ef6ae8bb1d697e4ed038b43320183c89" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void TupleApplication::work           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [protected, pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Worker processes are created and killed after the output process has finished. 
<p>Implemented in <a class="el" href="class_l_t_forward.html#d98aff7a063bf6e8542046c6f2c097fa">LTForward</a>, <a class="el" href="class_l_t_half.html#e60dd430fb782498837492c0331e0dea">LTHalf</a>, <a class="el" href="class_l_t_hull.html#829b19b354bbe61d7cd5250819bd7b63">LTHull</a>, <a class="el" href="class_l_t_life.html#c0600864c1742c2a12e15992c539c2da">LTLife</a>, <a class="el" href="class_l_t_mandel.html#5ea4d32e6d16f64148bddbb940d732da">LTMandel</a>, <a class="el" href="class_l_t_bounds.html#877b72b63e19fbb7114bae270fe20c53">LTBounds</a>, <a class="el" href="class_l_t_norm.html#f0905a2c85b2e2713e98b9b22714a022">LTNorm</a>, <a class="el" href="class_l_t_outer.html#e0b1322b40271bb94c272b6117c8d16c">LTOuter</a>, <a class="el" href="class_l_t_product.html#1ba17b14e59b82c917f404cc9642bb09">LTProduct</a>, <a class="el" href="class_l_t_randmat.html#fffb75c16f2aaaa2f1bdb8a52f79234c">LTRandmat</a>, <a class="el" href="class_l_t_sor.html#48363c30cbba1c5ca61ed86260db94af">LTSor</a>, <a class="el" href="class_l_t_frequency.html#7c47cf36b228505f79225a3fe8a00f01">LTFrequency</a>, <a class="el" href="class_l_t_thresh.html#3cff6d04c7389a32e1dca924c7f93e23">LTThresh</a>, <a class="el" href="class_l_t_vecdiff.html#0117017e12284b1eb57532ca447684f6">LTVecdiff</a>, and <a class="el" href="class_l_t_winnow.html#472d0a232050f4674339029b1aa47531">LTWinnow</a>.</p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="773a45a8a04a872fd9c42b9ec07c8ebd"></a><!-- doxytag: member="TupleApplication::ctx" ref="773a45a8a04a872fd9c42b9ec07c8ebd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">struct context <a class="el" href="class_tuple_application.html#773a45a8a04a872fd9c42b9ec07c8ebd">TupleApplication::ctx</a><code> [read, protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Tuple-space context (LinuxTuples-specific). 
</div>
</div><p>
<a class="anchor" name="92a57e83bfd67542ae58e6a78720a3ef"></a><!-- doxytag: member="TupleApplication::inputs" ref="92a57e83bfd67542ae58e6a78720a3ef" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::map&lt;int, void*&gt; <a class="el" href="class_tuple_application.html#92a57e83bfd67542ae58e6a78720a3ef">TupleApplication::inputs</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Inputs that should be available to all processes. 
</div>
</div><p>
<a class="anchor" name="8abaaa3ef053827d70b3948e6f855082"></a><!-- doxytag: member="TupleApplication::outputs" ref="8abaaa3ef053827d70b3948e6f855082" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::map&lt;int, void*&gt; <a class="el" href="class_tuple_application.html#8abaaa3ef053827d70b3948e6f855082">TupleApplication::outputs</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Outputs that should be available to all processes, and that should be writable by the outputProducer process. 
</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li>cowichan_lt/src/<a class="el" href="tuple__common_8hpp_source.html">tuple_common.hpp</a><li>cowichan_lt/src/<a class="el" href="tuple__common_8cpp.html">tuple_common.cpp</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Sat Aug 15 20:44:00 2009 for Cowichan by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.9 </small></address>
</body>
</html>
