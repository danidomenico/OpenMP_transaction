<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>Cowichan: Parallel Programming and Cowichan Problems</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.9 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li class="current"><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>Parallel Programming and Cowichan Problems</h1>
<p>
<h2><a class="anchor" name="intro_sec">
Introduction</a></h2>
The <a class="el" href="class_cowichan.html" title="Base class for all C++ implementations.">Cowichan</a> problems are implemented by various parallel programming systems. Serial C++ implementation is available for comparison. The <a class="el" href="class_cowichan.html" title="Base class for all C++ implementations.">Cowichan</a> class is the base class for all C++ implementations.<h2><a class="anchor" name="problems_sec">
The Problems</a></h2>
Currently, there are 14 <a class="el" href="class_cowichan.html" title="Base class for all C++ implementations.">Cowichan</a> problems. They are described below. <a class="el" href="class_cowichan.html" title="Base class for all C++ implementations.">Cowichan</a> class. Problems can be run separately by passing the problem name as an argument on the command line. The inputs to the problems are defined in <a class="el" href="cowichan__defaults_8hpp.html" title="Defaults for Cowichan programs.">cowichan_defaults.hpp</a>. There is currently no way to override the inputs without recompiling.<h3><a class="anchor" name="mandel_sec">
1. Mandelbrot Set Generation</a></h3>
This module generates the Mandelbrot Set for a specified region of the complex plane. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#ec6cc4eb2ad444474b923532167e98a2">Cowichan::mandel</a></dd></dl>
<h3><a class="anchor" name="randmat_sec">
2. Random Number Generation</a></h3>
This module fills a matrix with pseudo-random integers. Note that, as in all problems, the output is required to be independent of the number of processors used. However, the matrices generated may be different in each implementation. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#c44cacf9d9e363a5b076bcee8b9a7a73">Cowichan::randmat</a></dd></dl>
<h3><a class="anchor" name="half_sec">
3. Two-Dimensional Shuffle</a></h3>
This module divides the values in a rectangular two-dimensional integer matrix into two halves along one axis, shuffles them, and then repeats this operation along the other axis. Values in odd-numbered locations are collected at the low end of each row or column, while values in even-numbered locations are moved to the high end. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#308603053675bccbe631f04af921f57c">Cowichan::half</a></dd></dl>
<h3><a class="anchor" name="invperc_sec">
4. Invasion Percolation</a></h3>
Invasion percolation models the displacement of one fluid (such as oil) by another (such as water) in fractured rock. In two dimensions, this can be simulated by generating an NxN grid of random numbers in the range [1. . .R], and then marking the center cell of the grid as filled. In each iteration, one examines the four orthogonal neighbors of all filled cells, chooses the one with the lowest value (i.e. the one with the least resistance to filling), and fills it in. The simulation continues until some fixed percentage of cells have been filled, or until some other condition (such as the presence of trapped regions) is achieved. The fractal structure of the filled and unfilled regions is then examined to determine how much oil could be recovered. The naive way to implement this is to repeatedly scan the array; a more sophisticated, and much faster, sequential technique is to maintain a priority queue of unfilled cells which are neighbors of filled cells. This latter technique is similar to the list-based methods used in some cellular automaton programs, and is very difficult to parallelize effectively. Filling begins at the central cell of the matrix (rounding down for even-sized axes). <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#ea126792a31e54a8722663b7ea768955">Cowichan::invperc</a></dd></dl>
<h3><a class="anchor" name="thresh_sec">
5. Histogram Thresholding</a></h3>
This module performs histogram thresholding on an image. Given an integer image I and a target percentage p, it constructs a binary image B such that B[i,j] is set if no more than p percent of the pixels in I are brighter than I[i,j]. The general idea is that an image's histogram should have 2 peaks, one centered around the average foreground intensity, and one centered around the average background intensity. This program attempts to set a threshold between the two peaks in the histogram and select the pixels above the threshold. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#a0b633b8c1f21884e0998a9c7020c08c">Cowichan::thresh</a></dd></dl>
<h3><a class="anchor" name="life_sec">
6. Game of Life</a></h3>
This module simulates the evolution of Conway's Game of Life, a two-dimensional cellular automaton. At each time step, this module must count the number of live (true) neighbors of each cell, using both orthogonal and diagonal connectivity. The update rule is simple: if a cell has 3 live neighbors, or has 2 live neighbors and is already alive, it is alive in the next generation. In any other situation, the cell becomes, or stays, dead. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#d449595ef2fe934bdd128ac8b1f51d07">Cowichan::life</a></dd></dl>
<h3><a class="anchor" name="winnow_sec">
7. Weighted Point Selection</a></h3>
This module converts a matrix of integer values to a vector of points, represented as x and y coordinates. Each location where mask is true becomes a candidate point, with a weight equal to the integer value in matrix at that location and x and y coordinates equal to its row and column indices. These candidate points are then <b>sorted</b> into increasing order by weight, and n evenly-spaced points selected to create the result vector. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#13d60e06ced3b5da79d62c133ce82337">Cowichan::winnow</a></dd></dl>
<h3><a class="anchor" name="norm_sec">
8. Point Location Normalization</a></h3>
This module normalizes point coordinates so that all points lie within the unit square [0. . .1]x[0. . .1]. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#3df21e3c627958114e045c3559a29f30">Cowichan::norm</a></dd></dl>
<h3><a class="anchor" name="hull_sec">
9. Convex Hull</a></h3>
This module takes a list of two-dimensional points and reorders them by doing multiple convex hull computations. Convex hull is the boundary of the minimal convex set containing a given non-empty finite set of points in the plane. In other words, all points not in the convex hull are enclosed in the convex hull polygon. At each step the convex hull points are taken out of the input list and are put into the output list. The computation terminates when there are no more points left in the input list. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#0c6b68ae3c059b66893405f8530a2e0a">Cowichan::hull</a></dd></dl>
<h3><a class="anchor" name="outer_sec">
10. Outer Product</a></h3>
This module turns a vector containing point positions into a dense, symmetric, diagonally dominant matrix by calculating the distances between each pair of points. It also constructs a real vector whose values are the distance of each point from the origin. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#52f17221019290b88334b0ca7f3bcdb9">Cowichan::outer</a></dd></dl>
<h3><a class="anchor" name="gauss_sec">
11. Gaussian Elimination</a></h3>
This module solves a matrix equation AX = V for a dense, symmetric, diagonally dominant matrix A and an arbitrary vector non-zero V using explicit reduction (matrices are required to be symmetric and diagonally dominant in order to guarantee that there is a well-formed solution to the equation). <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#aa9aac74b96dc5ed33e821d94649d1b2">Cowichan::gauss</a></dd></dl>
<h3><a class="anchor" name="sor_sec">
12. Successive Over-Relaxation</a></h3>
This module solves a matrix equation AX = V for a dense, symmetric, diagonally dominant matrix A and an arbitrary vector non-zero V using successive over-relaxation. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#92d8d9ae77208115fdfe69e1174f601c">Cowichan::sor</a></dd></dl>
<h3><a class="anchor" name="product_sec">
13. Matrix-Vector Product</a></h3>
This module calculates V in AX = V where A is a matrix and X is a vector. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#3d7d4b581a1d6f0392dc452830fb3b03">Cowichan::product</a></dd></dl>
<h3><a class="anchor" name="vecdiff_sec">
14. 1-Norm Vector Difference</a></h3>
This module calculates the 1-norm of the difference between two vectors. In case the vectors are actual and computed values of some calculation the result represents the magnitude of the error. <dl class="see" compact><dt><b>See also:</b></dt><dd><a class="el" href="class_cowichan.html#775d72b5e7d122f9f32555352278250e">Cowichan::vecdiff</a> </dd></dl>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Sat Aug 15 20:44:00 2009 for Cowichan by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.9 </small></address>
</body>
</html>
