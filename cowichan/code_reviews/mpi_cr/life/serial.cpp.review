     1	/**
     2	 * Serial implementation of conway's game of life
     3	 *
     4	 * \file serial.cpp
     5	 * \author Andrew Borzenko
     6	 * \date 01-26-09
     7	 */
     8	
     9	#if NUMA
    10	EXTERN_ENV
    11	#endif
    12	
    13	#include "../include/main.h"
    14	#include "serial.h"
    15	
    16	// public
    17	
    18	void
    19	life(
    20	  bool2D*	world,			/* world to evolve */
    21	  int		nr,			/* row size */
    22	  int		nc,			/* column size */
    23	  int		iters			/* number of iterations */
    24	){
    25	  int2D*		count;			/* neighborhood counts */
    26	  int		i;			/* iteration index */
    27	  int		r, c;			/* row/column indices */
    28	  int		alive = nr * nc;	/* number alive */
    29	#if GRAPHICS
    30	  int		gfxCount = 0;
    31	#endif
    32	
    33	#if GRAPHICS
    34	  gfx_life(gfxCount++, world, nr, nc);
    35	#endif
    36	
    37	  count = new int2D[MAXEXT];
    38	
    39	  for (i=0; (i<iters) && alive; i++){
    40	    /* fill neighborhood counts */
    
Like I mentioned in parallel.cpp, I think it would be beneficial to explain
exactly what's going on here (i.e. border cases).
    
    41	    life_row(world, count, nr, nc, 0, nr-1, 1);
    42	    for (r=1; r<(nr-1); r++){
    43	      life_row(world, count, nr, nc, r, r-1, r+1);
    44	    }
    45	    life_row(world, count, nr, nc, nr-1, nr-2, 0);
    46	    /* update cells */
    47	    alive = 0;
    48	    for (r=0; r<nr; r++){
    49	      for (c=0; c<nc; c++){
    
I know what this does but it's not immediately obvious that this is the game of life.
    
    50		if ((count[r][c] == 3) || ((count[r][c] == 2) && world[r][c])){
    51		  world[r][c] = TRUE;
    52		  alive += 1;
    53		} else {
    54		  world[r][c] = FALSE;
    55		}
    56	      }
    57	    }
    58	#if GRAPHICS
    59	    gfx_life(gfxCount++, world, nr, nc);
    60	#endif
    61	  }
    62	
    63	  delete [] count;
    64	
    65	  /* check */
    66	  if (alive == 0){
    
What's the reason for this check?
    
    67	    fail("life", "no cells left alive", "iteration", "%d", i, NULL);
    68	  }
    69	
    70	  /* return */
    71	}
    72	
    73	// private
    74	
    75	void
    76	life_one(
    77	  bool2D*	world,			/* world to evolve */
    78	  int2D*		count,			/* neighborhood counts */
    79	  int		r,			/* this row */
    80	  int		r_lo,			/* lower row */
    81	  int		r_hi,			/* higher row */
    82	  int		c,			/* this column */
    83	  int		c_lo,			/* lower column */
    84	  int		c_hi			/* higher column */
    85	){
    86	  count[r][c] = world[r_lo][c_lo] + world[r_lo][c] + world[r_lo][c_hi]
    87		      + world[r][c_lo]            +          world[r][c_hi]
    88		      + world[r_hi][c_lo] + world[r_hi][c] + world[r_hi][c_hi];
    89	  /* return */
    90	}
    91	
    92	void
    93	life_row(
    94	  bool2D*	world,			/* world to evolve */
    95	  int2D*		count,			/* neighborhood counts */
    96	  int		nr,			/* row size */
    97	  int		nc,			/* column size */
    98	  int		r,			/* this row */
    99	  int		r_lo,			/* lower row */
   100	  int		r_hi			/* higher row */
   101	){
   102	  int		c;			/* column index */
   103	
   104	  life_one(world, count, r, r_lo, r_hi, 0, nc-1, 1);
   105	  for (c=1; c<(nc-1); c++){
   106	    life_one(world, count, r, r_lo, r_hi, c, c-1, c+1);
   107	  }
   108	  life_one(world, count, r, r_lo, r_hi, nc-1, nc-2, 0);
   109	
   110	  /* return */
   111	}
