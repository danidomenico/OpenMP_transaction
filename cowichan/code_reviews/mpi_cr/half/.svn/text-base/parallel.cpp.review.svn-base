     1	/**
     2	 * Parallel implementation of halving shuffle
     3	 *
     4	 * \file parallel.cpp
     5	 * \author Andrew Borzenko
     6	 * \date 02-27-09
     7	 */
     8	
     9	#include "../include/main.h"
    10	#include "parallel.h"
    11	
    12	/*
    13	 * @ half : body of halving shuffle
    14	 * > none
    15	 * + shuffle rows and columns
    16	 */
    17
    
Flow is: break up the rows and shuffle; synchronize; break up the columns
and shuffle; synchronize.    
    	
    18	void
    19	half_mpi (mpi::communicator world,
    20	  int2D*		matrix,			/* to shuffle */
    21	  int		nr,			/* row size */
    22	  int		nc			/* column size */
    23	){
    24	  int		lo, hi;		/* work controls */
    25	  int		r, c, i;		/* loop indices */
    26	  int1D*		tmp;			/* temporary */
    27	
    28	  tmp = new int1D[MAXEXT];
    29	
   
Isn't this pointer being shared between all of the workers?
    
    30	  // work
    31	  if (get_block_rows_mpi (world, 0, nr, &lo, &hi)) {
    32	    /* rows */
    33	    for (r = lo; r < hi; r++) {
    
I think adding comments here (e.g. store temporary, swap, restore) would
really help the readability of this section of code.
    
    34	      for (c = 1, i = 0; c < nc; c += 2, i++) {
    35	        tmp[i] = matrix[r][c];
    36	      }
    37	      for (c = 0, i = 0; c < (nc + 1) / 2; c++, i += 2) {
    38	        matrix[r][c] = matrix[r][i];
    39	      }
    40	      for (c = (nc + 1) / 2, i = 0; c < nc; c++, i++) {
    41	        matrix[r][c] = tmp[i];
    42	      }
    43	    }
    44	  }
    45	  
    46	  // broadcast matrix
    47	  for (i = 0; i < world.size (); i++) {
    48	    if (get_block_rows_mpi (world, 0, nr, &lo, &hi, i)) {
    49	      broadcast (world, matrix[lo], (hi - lo) * nc, i);
    50	    }
    51	  }
    52	
    53	  if (get_block_rows_mpi (world, 0, nc, &lo, &hi)) {
    54	    /* columns */
    55	    for (c = lo; c < hi; c++) {

Comments, again.
    
    56	      for (r = 1, i = 0; r < nr; r += 2, i++) {
    57	        tmp[i] = matrix[r][c];
    58	      }
    59	      for (r = 0, i = 0; r < (nr + 1) / 2; r++, i += 2) {
    60	        matrix[r][c] = matrix[i][c];
    61	      }
    62	      for (r = (nr + 1) / 2, i = 0; r < nr; r++, i++) {
    63	        matrix[r][c] = tmp[i];
    64	      }
    65	    }
    66	  }
    67	
    68	  // broadcast matrix
    69	  for (i = 0; i < world.size (); i++) {
    70	    if (get_block_rows_mpi (world, 0, nc, &lo, &hi, i)) {
    71	      for (c = lo; c < hi; c++) {
    72	        for (r = 0; r < nr; r++) {
    73	          broadcast (world, matrix[r][c], i);
    74	        }
    75	      }
    76	    }
    77	  }
    78	
    79	  delete [] tmp;
    80	
    81	  /* return */
    82	}
