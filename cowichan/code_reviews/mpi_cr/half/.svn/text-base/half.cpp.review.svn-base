     1	/**
     2	 * Halving shuffle
     3	 *
     4	 * \file half.cpp
     5	 * \author Andrew Borzenko
     6	 * \date 02-27-09
     7	 */
     8	
     9	#include "../include/main.h"
    10	#ifdef IS_PARALLEL
    11	  #include "parallel.h"
    12	#else
    13	  #include "serial.h"
    14	#endif
    15	
    16	int main(int argc, char* argv[])
    17	{
    18	#ifdef IS_PARALLEL
    19	  mpi::environment env(argc, argv);
    20	  mpi::communicator world;
    21	
    22	#ifdef TEST_OUTPUT
    23	  printf ("I am process %d\n", world.rank ());
    24	#endif
    25	#endif
    26	
    27	  int2D* matrix;
    28	  int    nr;    /* row size */
    29	  int    nc;    /* column size */
    30	  int limit;
    31	  int i, j;
    32	
    33	  srand (222);
    34	
    35	  nr = MAXEXT;
    36	  nc = MAXEXT;
    37	  limit = 10;
    38	
    39	  matrix = new int2D[MAXEXT];
    40	  for (i = 0; i < nr; i++)
    41	  {
    42	    for (j = 0; j < nc; j++)
    43	    {
    44	      matrix[i][j] = rand () % limit;
    45	    }
    46	  }
    47	
    48	#ifdef TEST_OUTPUT
    49	  printf ("matrix before shuffle:\n");
    50	  print_matrix (matrix, nr, nc);
    51	#endif
    52	
    53	#ifdef TEST_TIME
    54	  INT64 start, end;
    55	  start = get_ticks ();
    56	#endif
    57	
    58	#ifdef IS_PARALLEL
    59	  half_mpi (world, matrix, nr, nc);
    60	#else
    61	  half (matrix, nr, nc);
    62	#endif
    63	
    64	#ifdef TEST_TIME
    65	  end = get_ticks ();
    66	  print_elapsed_time (start, end);
    67	#endif
    68	
    69	#ifdef TEST_OUTPUT
    70	  printf ("matrix after shuffle:\n");
    71	  print_matrix (matrix, nr, nc);
    72	#endif
    73	
    74	  delete [] matrix;
    75	
    76	  return 0;
    77	}
