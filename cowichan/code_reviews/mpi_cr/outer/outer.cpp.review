     1	/**
     2	 * Outer product matrix
     3	 *
     4	 * \file outer.cpp
     5	 * \author Andrew Borzenko
     6	 * \date 02-27-09
     7	 */
     8	
     9	#include "../include/main.h"
    10	#ifdef IS_PARALLEL
    11	  #include "parallel.h"
    12	#else
    13	  #include "serial.h"
    14	#endif
    15	
    16	int main(int argc, char* argv[])
    17	{
    18	#ifdef IS_PARALLEL
    19	  mpi::environment env(argc, argv);
    20	  mpi::communicator world;
    21	
    22	#ifdef TEST_OUTPUT
    23	  printf ("I am process %d\n", world.rank ());
    24	#endif
    25	#endif
    26	
    27	  pt1D*		ptVec;			/* vector of points */
    28	  real2D*	matrix;			/* matrix to fill */
    29	  real1D*	realVec;		/* vector to fill */
    30	
    31	  int    n;    /* size */
    32	  int limit;
    33	  int i;
    34	
    35	  srand (222);
    36	
    37	  n = MAXEXT;
    38	  limit = 10;
    39	
    40	  ptVec = new pt1D[MAXEXT];
    41	  for (i = 0; i < n; i++)
    42	  {
    43	    ptVec[i].x = rand () % limit;
    44	    ptVec[i].y = rand () % limit;
    45	  }
    46	
    47	  matrix = new real2D[MAXEXT];
    48	
    49	  realVec = new real1D[MAXEXT];
    50	
    51	#ifdef TEST_OUTPUT
    52	  printf ("point vector:\n");
    53	  print_vector (ptVec, n);
    54	#endif
    55	
    56	#ifdef TEST_TIME
    57	  INT64 start, end;
    58	  start = get_ticks ();
    59	#endif
    60	
    61	#ifdef IS_PARALLEL
    62	  outer_mpi (world, ptVec, matrix, realVec, n);
    63	#else
    64	  outer (ptVec, matrix, realVec, n);
    65	#endif
    66	
    67	#ifdef TEST_TIME
    68	  end = get_ticks ();
    69	  print_elapsed_time (start, end);
    70	#endif
    71	
    72	#ifdef TEST_OUTPUT
    73	  printf ("Inter-point distance matrix:\n");
    74	  print_matrix (matrix, n, n);
    75	
    76	  printf ("Origin-to-point distance vector:\n");
    77	  print_vector (realVec, n);
    78	#endif
    79	
    80	  delete [] ptVec;
    81	  delete [] matrix;
    82	  delete [] realVec;
    83	
    84	  return 0;
    85	}
