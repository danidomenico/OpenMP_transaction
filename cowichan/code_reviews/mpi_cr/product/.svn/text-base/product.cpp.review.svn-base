     1	/**
     2	 * Matrix-vector product
     3	 *
     4	 * \file product.cpp
     5	 * \author Andrew Borzenko
     6	 * \date 02-02-09
     7	 */
     8	
     9	#include "../include/main.h"
    10	#ifdef IS_PARALLEL
    11	  #include "parallel.h"
    12	#else
    13	  #include "serial.h"
    14	#endif
    15	
    16	int main(int argc, char* argv[])
    17	{
    18	#ifdef IS_PARALLEL
    19	  mpi::environment env(argc, argv);
    20	  mpi::communicator world;
    21	
    22	#ifdef TEST_OUTPUT
    23	  printf ("I am process %d\n", world.rank ());
    24	#endif
    25	#endif
    26	
    27	  real2D*	matrix;			/* to multiply by */
    28	  real1D*	vector;			/* to be multiplied */
    29	  real1D*	result;			/* result of multiply */
    30	  int		nr;			/* row size */
    31	  int		nc;			/* column size */
    32	  int limit;
    33	  int i, j;
    34	
    35	  srand (222);
    36	
    37	  nr = MAXEXT;
    38	  nc = MAXEXT;
    39	  limit = 10;
    40	
    41	  matrix = new real2D[MAXEXT];
    42	  for (i = 0; i < nr; i++)
    43	  {
    44	    for (j = 0; j < nc; j++)
    45	    {
    46	      matrix[i][j] = (real) (rand () % limit);
    47	    }
    48	  }
    49	
    50	  vector = new real1D[MAXEXT];
    51	  for (i = 0; i < nr; i++)
    52	  {
    53	    vector[i] = (real) (rand () % limit);
    54	  }
    55	
    56	  result = new real1D[MAXEXT];
    57	
    58	#ifdef TEST_OUTPUT
    59	  printf ("Matrix\n");
    60	  print_matrix (matrix, nr, nc);
    61	  printf ("x Vector\n");
    62	  print_vector (vector, nr);
    63	#endif
    64	
    65	#ifdef TEST_TIME
    66	  INT64 start, end;
    67	  start = get_ticks ();
    68	#endif
    69	
    70	#ifdef IS_PARALLEL
    71	  product_mpi (world, matrix, vector, result, nr, nc);
    72	#else
    73	  product (matrix, vector, result, nr, nc);
    74	#endif
    75	
    76	#ifdef TEST_TIME
    77	  end = get_ticks ();
    78	  print_elapsed_time (start, end);
    79	#endif
    80	
    81	#ifdef TEST_OUTPUT
    82	  printf ("=\n");
    83	  print_vector (result, nr);
    84	#endif
    85	
    86	  delete [] matrix;
    87	  delete [] vector;
    88	  delete [] result;
    89	
    90	  return 0;
    91	}
