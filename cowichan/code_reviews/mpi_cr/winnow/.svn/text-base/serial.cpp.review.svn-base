     1	/**
     2	 * Serial implementation of weighted point selection
     3	 *
     4	 * \file serial.cpp
     5	 * \author Andrew Borzenko
     6	 * \date 02-23-09
     7	 */
     8	
     9	#include "../include/main.h"
    10	#include "serial.h"
    11	
    12	// public
    13	
    14	void
    15	winnow(
    16	  int2D*		matrix,			/* point values */
    17	  bool2D*	mask,			/* suitable points */
    18	  int		nr,			/* row size */
    19	  int		nc,			/* column size */
    20	  pt1D*		pt,			/* points to create */
    21	  int		npt			/* number of points */
    22	){
    23	  pt1DX*		ptVec;			/* temp point vector */
    24	  int		r, c, i, j, len;	/* indices and number of points */
    25	  int		stride;			/* selection stride */
    26	#if GRAPHICS
    27	  int		gfxCount;
    28	#endif
    29	
    30	#if GRAPHICS
    31	  gfx_winnow(gfxCount++, matrix, mask, pt, nr, nc, npt);
    32	#endif
    33	
    34	  ptVec = new pt1DX[MAXEXT * MAXEXT];
    35	
    36	  /* fill temporary vector */
    37	  len = winnow_redBool2DCount(mask, nr, nc);
    38	  ASSERT(len >= npt);
    39	  i = 0;
    40	  for (r=0; r<nr; r++){
    41	    for (c=0; c<nc; c++){
    42	      if (mask[r][c]){
    43		ptVec[i].x = r;
    44		ptVec[i].y = c;
    45		ptVec[i].w = matrix[r][c];
    46		i++;
    47	      }
    48	    }
    49	  }
    50	
    51	  /* sort */
    52	  ptSort(ptVec, len);
    53	
    54	  /* copy over points */
    55	  stride = len / npt;
    56	  for (i=npt-1, j=len-1; i>=0; i--, j-=stride){
    57	    pt[i] = ptVec[j];
    58	  }
    59	
    60	#if GRAPHICS
    61	  gfx_winnow(gfxCount++, matrix, mask, pt, nr, nc, npt);
    62	#endif
    63	
    64	  delete [] ptVec;
    65	
    66	  /* return */
    67	}
    68	
    69	// private
    70	
    71	int
    72	winnow_redBool2DCount(
    73	  bool2D*	mask,			/* to reduce */
    74	  int		nr,			/* row size */
    75	  int		nc			/* column size */
    76	){
    77	  int		r, c, sum = 0;		/* indices and result */
    78	
    79	  for (r=0; r<nr; r++){
    80	    for (c=0; c<nc; c++){
    81	      if (mask[r][c]) sum++;
    82	    }
    83	  }
    84	
    85	  return sum;
    86	}
