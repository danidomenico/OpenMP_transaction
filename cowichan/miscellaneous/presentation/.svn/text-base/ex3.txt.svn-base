3. Convex Hull:

Serial C++ implementation of Hull:

void hull (pt1D* points,     // list of points
           int n,            // number of points
           pt1D* hullPoints, // list of points in convex hull
           int* hn)          // number of points in convex hull
{
  int i;
  pt min_p;
  pt max_p;

  min_p = points[0];
  max_p = points[0];
  *hn = 0;

  // figure out the points with minimum and maximum x values
  for (i = 1; i < n; i++) {
    if (min_p.x > points[i].x) {
      min_p = points[i];
    }
    if (max_p.x < points[i].x) {
      max_p = points[i];
    }
  }

  // use these as initial pivots
  split (points, n, hullPoints, hn, min_p, max_p);
  split (points, n, hullPoints, hn, max_p, min_p);
}

void split (pt1D* points,     // list of points
            int n,            // number of points
            pt1D* hullPoints, // list of points in convex hull
            int* hn,          // number of points in convex hull
            pt p1,            // boundary point #1
            pt p2)            // boundary point #2
{
  pt* maxPoint = NULL;
  real maxCross = -std::numeric_limits<real>::infinity ();

  // compute the signed distances from the line for each point
  for (int i = 0; i < n; i++) {
    real currentCross = cross (p1, p2, points[i]);
    if (currentCross > maxCross) {
      maxPoint = &(points[i]);
      maxCross = currentCross;
    }
  }

  // is there a point in the positive half-space?
  // if so, it has maximal distance, and we must recurse based on that point.
  if (maxCross > 0.0) {
    // recurse on the new set with the given far point
    split (points, n, hullPoints, hn, p1, *maxPoint);
    split (points, n, hullPoints, hn, *maxPoint, p2);
    return;
  } 

  // otherwise, it's not on the right side; we don't need to split anymore.
  // this is because all points are inside the hull when we use this half-space.
  // add the first point and return.
  hullPoints[(*hn)++] = p1;
}

/**
 * Computes the cross product of the vectors (l1,l2) and (l1,p).
 */
inline real cross (pt l1, pt l2, pt p)
{
  return (l1.x - p.x) * (l2.y - p.y) - (l1.y - p.y) * (l2.x - p.x);
}


Hull using Thread Building Blocks:

// step 1: as before: define a class that finds a point of maximum cross

/**
 * Computes the maximum signed distance from a point to a line, given
 * the line and list of points.
 */
class MaximumDistance {
public:

 /**
  * Computes the cross product of the vectors (l1,l2) and (l1,p).
  */
  static inline real cross(const Point& l1, const Point& l2, const Point& p) {
    return (l1.x - p.x) * (l2.y - p.y) -
        (l1.y - p.y) * (l2.x - p.x);
  }

private:

  // step 2: as before: declare variables needed for computation

  const PointList& points;
  const Point &p1, &p2;
  Point maxPoint;
  real maxCross;

public:

  // step 3: as before: add variable initialization

  MaximumDistance(const PointList& points, const Point& p1, const Point& p2):
      points(points), p1(p1), p2(p2),
      maxCross(-numeric_limits<real>::infinity()) { }

  /**
   * Gets the point with maximum signed distance (if it has already been
   * calculated).
   */	
  Point getPoint() const {
    return maxPoint;
  }

  /**
   * Gets the signed distance to that point.
   */
  real getDistance() const {
    return maxCross;
  }

  // step 4: as before: override function call () operator.

  /**
   * Calculates the Point with maximum signed distance.
   */
  void operator()(const blocked_range<size_t>& range) {

    // step 5: find the max point in the given range.

    // compute the signed distances from the line for each point in the range.
    for (int i = range.begin(); i < range.end(); ++i) {
      real currentCross = cross(p1, p2, points[i]);
      if (currentCross > maxCross) {
        maxPoint = points[i];
        maxCross = currentCross;
      }
    }

  }

  // step 6: NEW: define a splitting constructor, which is used
  //         during reduction.

  /**
   * Splitting (TBB) constructor
   */
  MaximumDistance(MaximumDistance& other, split):
      points(other.points), maxCross(other.maxCross), p1(other.p1),
      p2(other.p2) { }


  // step 7: define join method, which performs the reduction.

  /**
   * Joiner (TBB).
   */
  void join(const MaximumDistance& other) {
    if (other.maxCross > maxCross) {
      maxPoint = other.maxPoint;
      maxCross = other.maxCross;
    }
  }

};


Inside the recursive function split...

// step 8: create an instance of MaximumDistance

MaximumDistance md(points, p1, p2);

// step 9: NEW: parallel reduction call.

parallel_reduce(blocked_range<size_t>(0, points.size()), md, auto_partitioner());

